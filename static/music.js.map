{
  "version": 3,
  "sources": ["../music.ts"],
  "sourcesContent": ["function el(id: string): HTMLElement { return document.getElementById(id) as any; }\r\n\r\ntype Result = {\r\n    Name: string\r\n    Type: \"Song\" | \"Artist\" | \"Album\" | \"AlbumHeader\" | \"Folder\"\r\n    Link: string, Audio: string,\r\n    Artist: string, Album: string, Image: string,\r\n    SongId: number,\r\n}\r\n\r\ntype ListMusicResult = {\r\n    Results: Result[], NextPage: string, PrevPage: string\r\n};\r\n\r\nlet audio = document.createElement(\"audio\");\r\nlet nextaudio = document.createElement(\"audio\");\r\nlet is_playing = false, enable_range_update = true, enable_volume_update = true;\r\nlet unmute_volume = audio.volume;\r\naudio.onplay = function () {\r\n    el(\"player-play\").innerHTML = `<i class=\"material-icons\">pause</i>`;\r\n    is_playing = true;\r\n};\r\naudio.onpause = function () {\r\n    el(\"player-play\").innerHTML = `<i class=\"material-icons\">play_arrow</i>`;\r\n    is_playing = false;\r\n};\r\nfunction formatTime(time: number): string {\r\n    let mins = Math.floor(time / 60).toString();\r\n    let secs = Math.floor(time % 60).toString();\r\n    if (secs.length < 2) {\r\n        secs = \"0\" + secs;\r\n    }\r\n    return mins + \":\" + secs;\r\n}\r\nfunction parseTime(time: string): number {\r\n    // H:mm:ss\r\n    let bits = time.split(':');\r\n    if (bits.length != 3) {\r\n        return 1;\r\n    }\r\n    return (parseInt(bits[0]) * 60 * 60) + (parseInt(bits[1]) * 60) + parseInt(bits[2]);\r\n}\r\naudio.ontimeupdate = function () {\r\n    if (enable_range_update) {\r\n        el(\"player-curtime\").innerText = formatTime(audio.currentTime);\r\n        (el(\"player-range\") as HTMLInputElement).value = audio.currentTime.toString();\r\n    } else {\r\n        el(\"player-curtime\").innerText = formatTime(parseFloat((el(\"player-range\") as HTMLInputElement).value));\r\n    }\r\n    if (audio.currentTime >= audio.duration) {\r\n        nexttrack();\r\n    }\r\n};\r\naudio.onloadedmetadata = function () {\r\n    el(\"player-endtime\").innerText = formatTime(audio.duration);\r\n    let range = (el(\"player-range\") as HTMLInputElement);\r\n    range.max = audio.duration.toString();\r\n    range.value = \"0\";\r\n    el(\"player-curtime\").innerText = \"0:00\";\r\n};\r\naudio.onvolumechange = function () {\r\n    console.log(audio.volume);\r\n    (el(\"player-volume\") as HTMLInputElement).value = (audio.volume * 100).toString();\r\n    el(\"player-mute\").innerHTML = `<i class=\"material-icons\">${audio.volume > 0 ? 'volume_up' : 'volume_mute'}</i>`;\r\n};\r\n\r\nlet sonosRoom = \"\";\r\nlet playlist: Result[] = [];\r\nlet playlistIdx = 0;\r\nfunction nexttrack() {\r\n    if (playlistIdx < playlist.length && sonosRoom.length == 0) {\r\n        playlistIdx++;\r\n        playsong();\r\n    }\r\n    if (sonosRoom.length > 0) {\r\n        sonoscommand({ Action: \"Next\" });\r\n    }\r\n}\r\nfunction prevtrack() {\r\n    if (playlistIdx > 0 && sonosRoom.length == 0) {\r\n        playlistIdx--;\r\n        playsong();\r\n    }\r\n    if (sonosRoom.length > 0) {\r\n        sonoscommand({ Action: \"Prev\" });\r\n    }\r\n}\r\ntype ActionReq = {\r\n    SongIDs?: number[]\r\n    Volume?: number,\r\n    Action?: \"Play\" | \"Pause\" | \"Next\" | \"Prev\"\r\n};\r\n\r\nfunction sonoscommand(actionReq: ActionReq) {\r\n    var req = new XMLHttpRequest();\r\n    req.open(\"POST\", \"/api/sonos/\" + sonosRoom + \"/action\");\r\n    req.onload = function () {\r\n        console.log(req.response);\r\n    };\r\n    let songIds: number[] = [];\r\n    for (let idx = playlistIdx; idx < playlist.length; idx++) {\r\n        songIds.push(playlist[idx].SongId);\r\n    }\r\n    req.send(JSON.stringify(actionReq));\r\n}\r\nfunction playsong() {\r\n    if (playlistIdx < 0 || playlist.length == 0 || playlistIdx >= playlist.length) {\r\n        audio.pause();\r\n        return;\r\n    }\r\n    let song = playlist[playlistIdx];\r\n    console.log(\"play \" + song.Audio + \" on \" + sonosRoom);\r\n    if (sonosRoom.length == 0) {\r\n        audio.src = song.Audio;\r\n        audio.load();\r\n        audio.play();\r\n\r\n        el(\"player-info\").innerHTML = `<a href=\"#artists/${song.Artist}\">${song.Artist}</a><br/><a href=\"#albums/${song.Album}\">${song.Album}</a><br/>${song.Name}`;\r\n        el(\"player-albumcover\").innerHTML = (song.Image as string).length > 0 ? `<img class=\"easeload\" onload=\"this.style.opacity=1\" src=\"${song.Image}\">` : ``;\r\n        if ('mediaSession' in navigator) {\r\n            navigator.mediaSession.metadata = new MediaMetadata({\r\n                title: song.Name, artist: song.Artist, album: song.Album, artwork: [{ src: song.Image ?? \"\" }],\r\n            });\r\n            navigator.mediaSession.setActionHandler('play', () => { audio.play(); });\r\n            navigator.mediaSession.setActionHandler('pause', () => { audio.pause(); });\r\n            navigator.mediaSession.setActionHandler('seekto', (details) => { if (details.seekTime) { audio.currentTime = details.seekTime; } });\r\n            navigator.mediaSession.setActionHandler('previoustrack', () => prevtrack());\r\n            navigator.mediaSession.setActionHandler('nexttrack', () => nexttrack());\r\n        }\r\n    } else {\r\n        audio.pause();\r\n        let songIds: number[] = [];\r\n        for (let idx = playlistIdx; idx < playlist.length; idx++) {\r\n            songIds.push(playlist[idx].SongId);\r\n        }\r\n        sonoscommand({ SongIDs: songIds });\r\n    }\r\n}\r\n\r\nlet prevApi = \"\";\r\nlet cachedScrolls: Record<string, number> = {};\r\n\r\nfunction getmusic(api: string) {\r\n    if (prevApi.length > 0) {\r\n        cachedScrolls[prevApi] = el(\"results\").scrollTop;\r\n    }\r\n    if (prevApi == \"\" && api == \"\" && window.innerWidth > 750) {\r\n        api = \"albums\";\r\n    }\r\n    el(\"results\").innerHTML = \"\";\r\n    var req = new XMLHttpRequest();\r\n    req.open(\"GET\", \"/api/music/\" + api);\r\n    req.onload = function () {\r\n        let res = JSON.parse(req.response) as ListMusicResult;\r\n        let html = \"\";\r\n        if (api == \"albums\") {\r\n            html += `<div class=\"albumcontainer\">`;\r\n            for (let result of res.Results) {\r\n                html += `<div class=\"album\"><a href=\"#${result.Link}\">`;\r\n                if (result.Image.length > 0) {\r\n                    html += `<div class=\"albumbox\"><img class=\"albumbox easeload\" onload=\"this.style.opacity=1\" loading=\"lazy\" src=\"/content${result.Image}\" /></div>`;\r\n                } else {\r\n                    html += `<div class=\"albumbox\"></div>`;\r\n                }\r\n                html += `<div class=\"albumtext\">${result.Name}<br/>${result.Artist}</div></a></div>`;\r\n            }\r\n            html += `</div>`;\r\n        } else {\r\n            let first = true;\r\n            for (let idx in res.Results) {\r\n                let result = res.Results[idx];\r\n                if (result.Type == \"Song\") {\r\n                    html += `<div class=\"song ${first ? 'firstpad' : ''}\">\r\n                        <a class=\"play\" data-idx=\"${idx}\">${result.Name}</a>\r\n                    </div>`;\r\n                } else if (result.Type == \"AlbumHeader\") {\r\n                    html += `<div class=\"albumheader ${first ? '' : 'albumheaderpad'}\"><div>`;\r\n                    if (result.Image.length > 0) {\r\n                        html += `<div class=\"albumbox\"><img class=\"albumbox easeload\" onload=\"this.style.opacity=1\" loading=\"lazy\" src=\"/content${result.Image}\" /></div>`;\r\n                    } else {\r\n                        html += `<div class=\"albumbox\"></div>`;\r\n                    }\r\n                    html += `</div><div><h1>${result.Name}</h1><a href=\"#artists/${result.Artist}\">${result.Artist}</a></div></div>`;\r\n                } else {\r\n                    let icon = \"folder\";\r\n                    if (result.Type == \"Artist\" || result.Name == \"Artists\") {\r\n                        icon = \"person\";\r\n                    } else if (result.Name == \"Albums\") {\r\n                        icon = \"album\";\r\n                    } else if (result.Name == \"Songs\") {\r\n                        icon = \"music_note\";\r\n                    }\r\n                    html += `<div class=\"folder ${first ? 'firstpad' : ''}\"><a href=\"#${result.Link}\"><i class=\"material-icons\">${icon}</i><span>${result.Name}</span></a></div>`;\r\n                }\r\n                first = false;\r\n            }\r\n        }\r\n        el(\"results\").innerHTML = html;\r\n        for (let node of document.querySelectorAll(\".play\")) {\r\n            let idx = parseInt((node as HTMLElement).dataset.idx as string);\r\n            (node as HTMLElement).onclick = function () {\r\n                playlist = [];\r\n                for (let rx in res.Results) {\r\n                    let ridx = parseInt(rx);\r\n                    if (res.Results[ridx].Type == \"Song\") {\r\n                        if (idx == ridx) {\r\n                            playlistIdx = playlist.length;\r\n                        }\r\n                        playlist.push(res.Results[ridx]);\r\n                    }\r\n                }\r\n                playsong();\r\n            };\r\n        }\r\n        if (cachedScrolls[api]) {\r\n            el(\"results\").scrollTop = cachedScrolls[api];\r\n        }\r\n        prevApi = api;\r\n    };\r\n    req.send();\r\n}\r\n\r\ntype SonosResponse = {\r\n    Rooms: string[],\r\n    Sonos: {\r\n        Album: string | undefined,\r\n        AlbumArtURI: string | undefined,\r\n        Artist: string,\r\n        Duration: string,\r\n        Playing: boolean,\r\n        Position: string,\r\n        Track: string,\r\n        Volume: number | undefined\r\n    },\r\n};\r\n\r\nlet sonosRooms: string[] = [];\r\nfunction sonosroomhtml(): string {\r\n    let html = `<div onclick=\"setspeaker(this)\" data-room=\"\" class=\"${sonosRoom.length == 0 ? 'selected' : ''}\"><span class=\"valign-wrapper\"><i class=\"material-icons\">${sonosRoom.length == 0 ? 'check' : 'speaker'}</i> Speaker</span></div>`;\r\n    for (let room of sonosRooms) {\r\n        html += `<div onclick=\"setspeaker(this)\" data-room=\"${room}\" class=\"${sonosRoom == room ? 'selected' : ''}\"><span class=\"valign-wrapper\"><i class=\"material-icons\">${sonosRoom == room ? 'check' : 'speaker'}</i> ${room}</span></div>`;\r\n    }\r\n    return html;\r\n}\r\nlet evts: EventSource | null = null;\r\nlet sonosTimeSecs = 0;\r\nlet sonosTickId = 0;\r\nfunction tickSonosTime() {\r\n    if (sonosRoom.length == 0 || !is_playing) {\r\n        clearInterval(sonosTickId);\r\n        return;\r\n    }\r\n    el(\"player-curtime\").innerText = formatTime(sonosTimeSecs);\r\n    if (enable_range_update) {\r\n        (el(\"player-range\") as HTMLInputElement).value = sonosTimeSecs.toString();\r\n    }\r\n    sonosTimeSecs++;\r\n}\r\n\r\n(window as any).setspeaker = function (elem) {\r\n    setspeaker((elem as HTMLElement).dataset.room as string);\r\n};\r\nfunction setspeaker(room: string) {\r\n    sonosRoom = room;\r\n    console.log(\"set \" + sonosRoom);\r\n    el(\"sonos-list\").innerHTML = sonosroomhtml();\r\n    el(\"player-speakers\").innerHTML = `<span class=\"valign-wrapper\"><i class=\" material-icons ${sonosRoom.length > 0 ? 'selected' : ''}\">speaker</i>${sonosRoom}</span>`;\r\n    audio.pause();\r\n\r\n    if (evts != null) {\r\n        evts.close();\r\n    }\r\n    if (sonosRoom.length > 0) {\r\n        el(\"player-right\").classList.remove(\"player-right-volume\");\r\n        evts = new EventSource(\"/api/sonos/\" + sonosRoom + \"/events\");\r\n        evts.onmessage = (event) => {\r\n            let res = JSON.parse(event.data) as SonosResponse;\r\n            console.log(res);\r\n            if (res.Sonos.Track) {\r\n                is_playing = res.Sonos.Playing;\r\n                el(\"player-play\").innerHTML = res.Sonos.Playing ? `<i class=\"material-icons\">pause</i>` : `<i class=\"material-icons\">play_arrow</i>`;\r\n                el(\"player-endtime\").innerText = formatTime(parseTime(res.Sonos.Duration));\r\n                (el(\"player-range\") as HTMLInputElement).max = parseTime(res.Sonos.Duration).toString();\r\n                sonosTimeSecs = parseTime(res.Sonos.Position);\r\n                tickSonosTime();\r\n                if (is_playing) {\r\n                    clearInterval(sonosTickId);\r\n                    sonosTickId = setInterval(tickSonosTime, 1000);\r\n                }\r\n                el(\"player-info\").innerHTML = `<a href=\"#artists/${res.Sonos.Artist ?? ''}\">${res.Sonos.Artist ?? ''}</a><br/><a href=\"#albums/${res.Sonos.Album ?? ''}\">${res.Sonos.Album ?? ''}</a><br/>${res.Sonos.Track ?? ''}`;\r\n                let newArt = res.Sonos.AlbumArtURI ? `<img class=\"easeload\" onload=\"this.style.opacity=1\" src=\"${res.Sonos.AlbumArtURI}\">` : ``;\r\n                if (el(\"player-albumcover\").innerHTML != newArt) {\r\n                    el(\"player-albumcover\").innerHTML = newArt;\r\n                }\r\n            }\r\n            if (res.Sonos.Volume && enable_volume_update) {\r\n                (el(\"player-volume\") as HTMLInputElement).value = res.Sonos.Volume.toString();\r\n            }\r\n        };\r\n        evts.onerror = () => {\r\n            console.log(\"connection lost\");\r\n            setspeaker(\"\");\r\n        };\r\n    } else {\r\n        el(\"player-right\").classList.add(\"player-right-volume\");\r\n        el(\"player-albumcover\").innerHTML = \"\";\r\n        el(\"player-info\").innerHTML = \"\";\r\n        (el(\"player-range\") as HTMLInputElement).max = \"1\";\r\n        (el(\"player-range\") as HTMLInputElement).value = \"0\";\r\n        el(\"player-endtime\").innerText = \"0:00\";\r\n        el(\"player-curtime\").innerText = \"0:00\";\r\n    }\r\n};\r\nfunction refreshsonos() {\r\n    var req = new XMLHttpRequest();\r\n    req.open(\"GET\", \"/api/sonos\");\r\n    req.onload = function () {\r\n        sonosRooms = (JSON.parse(req.response) as SonosResponse).Rooms ?? [];\r\n        el(\"sonos-list\").innerHTML = sonosroomhtml();\r\n        el(\"player-speakers\").onclick = (e) => {\r\n            let style = el(\"sonos-list\").style;\r\n            let button = el(\"player-speakers\").getBoundingClientRect();\r\n            style.left = Math.min(window.innerWidth - 210, button.x) + \"px\";\r\n            style.bottom = (window.innerHeight - button.y + 15) + \"px\";\r\n            style.display = \"block\";\r\n            e.stopPropagation();\r\n        };\r\n        document.body.onclick = function () {\r\n            el(\"sonos-list\").style.display = 'none';\r\n        };\r\n    };\r\n    el(\"sonos-list\").innerHTML = \"\";\r\n    req.send();\r\n}\r\n\r\nwindow.onhashchange = function () {\r\n    getmusic(window.location.hash.slice(1));\r\n};\r\nwindow.onload = function () {\r\n    getmusic(window.location.hash.slice(1));\r\n    refreshsonos();\r\n    el(\"player-play\").onclick = function () {\r\n        if (is_playing) {\r\n            if (sonosRoom.length > 0) {\r\n                sonoscommand({ Action: \"Pause\" });\r\n            } else {\r\n                audio.pause();\r\n            }\r\n        } else {\r\n            if (sonosRoom.length > 0) {\r\n                sonoscommand({ Action: \"Play\" });\r\n            } else {\r\n                audio.play();\r\n            }\r\n        }\r\n    };\r\n    el(\"player-range\").onmousedown = function () {\r\n        enable_range_update = false;\r\n    };\r\n    el(\"player-range\").onmouseleave = function () {\r\n        enable_range_update = true;\r\n    };\r\n    el(\"player-range\").oninput = function () {\r\n        enable_range_update = true;\r\n        let time = parseFloat((el(\"player-range\") as HTMLInputElement).value);\r\n        audio.currentTime = time;\r\n    };\r\n    el(\"player-mute\").onclick = function () {\r\n        if (audio.volume == 0) {\r\n            audio.volume = unmute_volume;\r\n        } else {\r\n            unmute_volume = audio.volume;\r\n            audio.volume = 0;\r\n        }\r\n    };\r\n    el(\"player-volume\").onmousedown = function () {\r\n        enable_volume_update = false;\r\n    };\r\n    el(\"player-volume\").onmouseleave = function () {\r\n        enable_volume_update = true;\r\n    };\r\n    el(\"player-volume\").oninput = function () {\r\n        enable_volume_update = true;\r\n        let volume = parseFloat((el(\"player-volume\") as HTMLInputElement).value);\r\n        audio.volume = volume / 100;\r\n        if (sonosRoom.length > 0) {\r\n            sonoscommand({ Volume: volume });\r\n        }\r\n    };\r\n    el(\"player-prev\").onclick = function () {\r\n        prevtrack();\r\n    };\r\n    el(\"player-next\").onclick = function () {\r\n        nexttrack();\r\n    };\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
